# Constructing the Boilerplate

## 1. 检出 git-template 的样板代码

```
git clone https://gitlab.freedesktop.org/gstreamer/gst-template.git
```


## 2. 设置项目的印章

创建新元素时要做的第一件事是指定它的一些基本细节：它的名字是什么，谁编写的，它的版本号是什么等等。我们还需要定义一个对象来表示元素并存储 元素需要的数据。 这些细节统称为样板 (boilerplate)。

定义样板文件的标准方法就是编写一些代码，并填充一些结构。 如上一节所述，最简单的方法是复制模板并根据您的需要添加功能。 为了帮助您做到这一点，./gst-plugin/tools/ 目录中有一个工具。 这个工具 make_element 是一个命令行实用程序，可以为您创建样板代码。

要使用 make_element，首先打开一个终端窗口。 切换到 gst-template/gst-plugin/src 目录，然后运行 make_element 命令。 make_element 的参数是：

1. 插件的名称
2. 该工具将使用的源文件。 默认情况下，使用 gstplugin。

例如，以下命令根据插件模板创建 MyFilter 插件，并将输出文件放在 gst-template/gst-plugin/src 目录中：

```
$ cd gst-template/gst-plugin/src
$ ../tools/make_element MyFilter

```

## 自动生成基础代码

这个新插件的代码可以通过 meson 和 ninja 来构建

```
meson build
ninja -C build

```

自动生成的代码为我们做了这几件事

1. 生成 生成 gstmyfilter.c 和 gstmyfilter.h
2. 注册 my-filter 这个 element

## 设置元素的基本信息

设置此元素的基本信息，例如 element name, type, description and author 信息

## GstStaticPadTemplate
通过 GstStaticPadTemplate 来描述这个 element 将要创建和使用的 pad

* pad 的简短名称
* pad 的方向
* pad 的扩展属性
* 这个 element 所支持的类型(capabilities)

例如

```
/* the capabilities of the inputs and outputs.
 *
 * describe the real formats here.
 */
static GstStaticPadTemplate sink_factory = GST_STATIC_PAD_TEMPLATE ("sink",
    GST_PAD_SINK,
    GST_PAD_ALWAYS,
    GST_STATIC_CAPS ("ANY")
    );

static GstStaticPadTemplate src_factory = GST_STATIC_PAD_TEMPLATE ("src",
    GST_PAD_SRC,
    GST_PAD_ALWAYS,
    GST_STATIC_CAPS ("ANY")
    );
```

这些 pad templates 在 `_class_init()` 函数被注册
